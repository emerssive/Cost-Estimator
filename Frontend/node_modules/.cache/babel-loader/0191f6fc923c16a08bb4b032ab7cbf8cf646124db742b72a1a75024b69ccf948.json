{"ast":null,"code":"var _jsxFileName = \"/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js\";\nimport React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  projectData\n}) {\n  const {\n    tasks\n  } = projectData || {};\n  if (!tasks || !Array.isArray(tasks)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Project Task Details', 10, 10);\n    tasks.forEach(({\n      task,\n      subtasks\n    }, index) => {\n      var _doc$lastAutoTable, _doc$lastAutoTable2;\n      doc.text(`${index + 1}. ${task}`, 10, ((_doc$lastAutoTable = doc.lastAutoTable) === null || _doc$lastAutoTable === void 0 ? void 0 : _doc$lastAutoTable.finalY) || 20); // Task title\n      autoTable(doc, {\n        head: [['Subtask', 'Development Hours', 'Comments']],\n        body: subtasks.map(({\n          subtask,\n          hours,\n          comments\n        }) => [subtask, `${hours} hours`, comments || 'N/A']),\n        startY: ((_doc$lastAutoTable2 = doc.lastAutoTable) === null || _doc$lastAutoTable2 === void 0 ? void 0 : _doc$lastAutoTable2.finalY) || 30\n      });\n    });\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const rows = tasks.map(({\n      task,\n      subtasks\n    }) => {\n      const taskHeader = new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph(task)],\n          columnSpan: 3\n        })]\n      });\n      const subtaskRows = subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => {\n        return new TableRow({\n          children: [new TableCell({\n            children: [new Paragraph(subtask)]\n          }), new TableCell({\n            children: [new Paragraph(`${hours} hours`)]\n          }), new TableCell({\n            children: [new Paragraph(comments || 'N/A')]\n          })]\n        });\n      });\n      return [taskHeader, ...subtaskRows];\n    });\n    const flatRows = rows.flat(); // Flatten rows for the table\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1'\n        }), new Table({\n          rows: [new TableRow({\n            children: [new TableCell({\n              children: [new Paragraph('Subtask')]\n            }), new TableCell({\n              children: [new Paragraph('Development Hours')]\n            }), new TableCell({\n              children: [new Paragraph('Comments')]\n            })]\n          }), ...flatRows]\n        })]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Project Task Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Development Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map((taskItem, taskIndex) => taskItem.subtasks.map((subtask, subIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: taskIndex === subIndex ? taskItem.task : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: subtask.subtask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [subtask.hours, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: subtask.comments || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)]\n        }, `${taskIndex}-${subIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToPDF,\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToDOCX,\n        children: \"Export to DOCX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","jsxDEV","_jsxDEV","ResultsTable","projectData","tasks","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","exportToPDF","doc","text","forEach","task","subtasks","index","_doc$lastAutoTable","_doc$lastAutoTable2","lastAutoTable","finalY","head","body","map","subtask","hours","comments","startY","save","exportToDOCX","rows","taskHeader","columnSpan","subtaskRows","flatRows","flat","sections","heading","toBlob","then","blob","className","taskItem","taskIndex","subIndex","onClick","_c","$RefreshReg$"],"sources":["/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\n\nfunction ResultsTable({ projectData }) {\n    const { tasks } = projectData || {};\n    if (!tasks || !Array.isArray(tasks)) {\n        return <p>No tasks available to display.</p>;\n    }\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.text('Project Task Details', 10, 10);\n\n        tasks.forEach(({ task, subtasks }, index) => {\n            doc.text(`${index + 1}. ${task}`, 10, doc.lastAutoTable?.finalY || 20); // Task title\n            autoTable(doc, {\n                head: [['Subtask', 'Development Hours', 'Comments']],\n                body: subtasks.map(({ subtask, hours, comments }) => [\n                    subtask,\n                    `${hours} hours`,\n                    comments || 'N/A',\n                ]),\n                startY: doc.lastAutoTable?.finalY || 30,\n            });\n        });\n\n        doc.save('Project_Estimates.pdf');\n    };\n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const rows = tasks.map(({ task, subtasks }) => {\n            const taskHeader = new TableRow({\n                children: [\n                    new TableCell({ children: [new Paragraph(task)], columnSpan: 3 }),\n                ],\n            });\n\n            const subtaskRows = subtasks.map(({ subtask, hours, comments }) => {\n                return new TableRow({\n                    children: [\n                        new TableCell({ children: [new Paragraph(subtask)] }),\n                        new TableCell({ children: [new Paragraph(`${hours} hours`)] }),\n                        new TableCell({ children: [new Paragraph(comments || 'N/A')] }),\n                    ],\n                });\n            });\n\n            return [taskHeader, ...subtaskRows];\n        });\n\n        const flatRows = rows.flat(); // Flatten rows for the table\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({ text: 'Project Task Details', heading: 'Heading1' }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({ children: [new Paragraph('Subtask')] }),\n                                        new TableCell({ children: [new Paragraph('Development Hours')] }),\n                                        new TableCell({ children: [new Paragraph('Comments')] }),\n                                    ],\n                                }),\n                                ...flatRows,\n                            ],\n                        }),\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div className=\"results-table\">\n            <h3>Project Task Details</h3>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Subtask</th>\n                        <th>Development Hours</th>\n                        <th>Comments</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((taskItem, taskIndex) =>\n                        taskItem.subtasks.map((subtask, subIndex) => (\n                            <tr key={`${taskIndex}-${subIndex}`}>\n                                <td>{taskIndex === subIndex ? taskItem.task : ''}</td>\n                                <td>{subtask.subtask}</td>\n                                <td>{subtask.hours} hours</td>\n                                <td>{subtask.comments || 'N/A'}</td>\n                            </tr>\n                        ))\n                    )}\n                </tbody>\n            </table>\n            <div className=\"actions\">\n                <button onClick={exportToPDF}>Export to PDF</button>\n                <button onClick={exportToDOCX}>Export to DOCX</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultsTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}