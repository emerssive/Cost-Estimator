{"ast":null,"code":"var _jsxFileName = \"/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js\";\nimport React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  projectData\n}) {\n  const {\n    tasks\n  } = projectData || {};\n  if (!tasks || !Array.isArray(tasks)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n\n    // Set margins\n    doc.setMargins(10, 10, 10, 10); // Left, Top, Right, Bottom margins\n\n    // Title\n    doc.setFontSize(18);\n    doc.text('Project Task Details', 14, 20);\n\n    // Table Header\n    const header = [['Task', 'Subtask', 'Development Hours', 'Comments']];\n\n    // Prepare body for subtasks\n    const body = tasks.map(({\n      task,\n      subtasks\n    }) => subtasks.map(({\n      subtask,\n      hours,\n      comments\n    }) => [task, subtask, `${hours} hours`, comments || 'N/A'])).flat();\n\n    // Add the table with custom styling\n    autoTable(doc, {\n      head: header,\n      body: body,\n      startY: 30,\n      // Start position below the title\n      margin: {\n        top: 10,\n        left: 10,\n        right: 10\n      },\n      // Custom margins\n      styles: {\n        fontSize: 12,\n        cellPadding: 3,\n        halign: 'left',\n        // Left align the cells\n        valign: 'middle' // Vertically center text\n      },\n      headStyles: {\n        fillColor: [22, 160, 133],\n        // Set table header background color\n        textColor: [255, 255, 255],\n        // Set text color\n        fontStyle: 'bold'\n      },\n      bodyStyles: {\n        fillColor: [255, 255, 255] // Set body row background color\n      }\n    });\n\n    // Save the PDF\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const rows = tasks.map(({\n      task,\n      subtasks\n    }) => {\n      const taskHeader = new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph(task)],\n          columnSpan: 3\n        })]\n      });\n      const subtaskRows = subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => {\n        return new TableRow({\n          children: [new TableCell({\n            children: [new Paragraph(subtask)]\n          }), new TableCell({\n            children: [new Paragraph(`${hours} hours`)]\n          }), new TableCell({\n            children: [new Paragraph(comments || 'N/A')]\n          })]\n        });\n      });\n      return [taskHeader, ...subtaskRows];\n    });\n    const flatRows = rows.flat(); // Flatten rows for the table\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1'\n        }), new Table({\n          rows: [new TableRow({\n            children: [new TableCell({\n              children: [new Paragraph('Subtask')]\n            }), new TableCell({\n              children: [new Paragraph('Development Hours')]\n            }), new TableCell({\n              children: [new Paragraph('Comments')]\n            })]\n          }), ...flatRows]\n        })]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Project Task Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Development Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map((taskItem, taskIndex) => taskItem.subtasks.map((subtask, subIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: taskIndex === subIndex ? taskItem.task : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: subtask.subtask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [subtask.hours, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: subtask.comments || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this)]\n        }, `${taskIndex}-${subIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToPDF,\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToDOCX,\n        children: \"Export to DOCX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","jsxDEV","_jsxDEV","ResultsTable","projectData","tasks","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","exportToPDF","doc","setMargins","setFontSize","text","header","body","map","task","subtasks","subtask","hours","comments","flat","head","startY","margin","top","left","right","styles","fontSize","cellPadding","halign","valign","headStyles","fillColor","textColor","fontStyle","bodyStyles","save","exportToDOCX","rows","taskHeader","columnSpan","subtaskRows","flatRows","sections","heading","toBlob","then","blob","className","taskItem","taskIndex","subIndex","onClick","_c","$RefreshReg$"],"sources":["/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\n\nfunction ResultsTable({ projectData }) {\n    const { tasks } = projectData || {};\n    if (!tasks || !Array.isArray(tasks)) {\n        return <p>No tasks available to display.</p>;\n    }\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n    \n        // Set margins\n        doc.setMargins(10, 10, 10, 10);  // Left, Top, Right, Bottom margins\n    \n        // Title\n        doc.setFontSize(18);\n        doc.text('Project Task Details', 14, 20);\n    \n        // Table Header\n        const header = [['Task', 'Subtask', 'Development Hours', 'Comments']];\n    \n        // Prepare body for subtasks\n        const body = tasks.map(({ task, subtasks }) => \n            subtasks.map(({ subtask, hours, comments }) => [\n                task,\n                subtask,\n                `${hours} hours`,\n                comments || 'N/A',\n            ])\n        ).flat();\n    \n        // Add the table with custom styling\n        autoTable(doc, {\n            head: header,\n            body: body,\n            startY: 30, // Start position below the title\n            margin: { top: 10, left: 10, right: 10 }, // Custom margins\n            styles: {\n                fontSize: 12,\n                cellPadding: 3,\n                halign: 'left', // Left align the cells\n                valign: 'middle', // Vertically center text\n            },\n            headStyles: {\n                fillColor: [22, 160, 133], // Set table header background color\n                textColor: [255, 255, 255], // Set text color\n                fontStyle: 'bold',\n            },\n            bodyStyles: {\n                fillColor: [255, 255, 255], // Set body row background color\n            },\n        });\n    \n        // Save the PDF\n        doc.save('Project_Estimates.pdf');\n    };\n    \n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const rows = tasks.map(({ task, subtasks }) => {\n            const taskHeader = new TableRow({\n                children: [\n                    new TableCell({ children: [new Paragraph(task)], columnSpan: 3 }),\n                ],\n            });\n\n            const subtaskRows = subtasks.map(({ subtask, hours, comments }) => {\n                return new TableRow({\n                    children: [\n                        new TableCell({ children: [new Paragraph(subtask)] }),\n                        new TableCell({ children: [new Paragraph(`${hours} hours`)] }),\n                        new TableCell({ children: [new Paragraph(comments || 'N/A')] }),\n                    ],\n                });\n            });\n\n            return [taskHeader, ...subtaskRows];\n        });\n\n        const flatRows = rows.flat(); // Flatten rows for the table\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({ text: 'Project Task Details', heading: 'Heading1' }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({ children: [new Paragraph('Subtask')] }),\n                                        new TableCell({ children: [new Paragraph('Development Hours')] }),\n                                        new TableCell({ children: [new Paragraph('Comments')] }),\n                                    ],\n                                }),\n                                ...flatRows,\n                            ],\n                        }),\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div className=\"results-table\">\n            <h3>Project Task Details</h3>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Subtask</th>\n                        <th>Development Hours</th>\n                        <th>Comments</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((taskItem, taskIndex) =>\n                        taskItem.subtasks.map((subtask, subIndex) => (\n                            <tr key={`${taskIndex}-${subIndex}`}>\n                                <td>{taskIndex === subIndex ? taskItem.task : ''}</td>\n                                <td>{subtask.subtask}</td>\n                                <td>{subtask.hours} hours</td>\n                                <td>{subtask.comments || 'N/A'}</td>\n                            </tr>\n                        ))\n                    )}\n                </tbody>\n            </table>\n            <div className=\"actions\">\n                <button onClick={exportToPDF}>Export to PDF</button>\n                <button onClick={exportToDOCX}>Export to DOCX</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultsTable;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,MAAM;AAC9E,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,YAAYA,CAAC;EAAEC;AAAY,CAAC,EAAE;EACnC,MAAM;IAAEC;EAAM,CAAC,GAAGD,WAAW,IAAI,CAAC,CAAC;EACnC,IAAI,CAACC,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACjC,oBAAOH,OAAA;MAAAM,QAAA,EAAG;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChD;;EAEA;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,GAAG,GAAG,IAAItB,KAAK,CAAC,CAAC;;IAEvB;IACAsB,GAAG,CAACC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAE;;IAEjC;IACAD,GAAG,CAACE,WAAW,CAAC,EAAE,CAAC;IACnBF,GAAG,CAACG,IAAI,CAAC,sBAAsB,EAAE,EAAE,EAAE,EAAE,CAAC;;IAExC;IACA,MAAMC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAAC;;IAErE;IACA,MAAMC,IAAI,GAAGd,KAAK,CAACe,GAAG,CAAC,CAAC;MAAEC,IAAI;MAAEC;IAAS,CAAC,KACtCA,QAAQ,CAACF,GAAG,CAAC,CAAC;MAAEG,OAAO;MAAEC,KAAK;MAAEC;IAAS,CAAC,KAAK,CAC3CJ,IAAI,EACJE,OAAO,EACP,GAAGC,KAAK,QAAQ,EAChBC,QAAQ,IAAI,KAAK,CACpB,CACL,CAAC,CAACC,IAAI,CAAC,CAAC;;IAER;IACAjC,SAAS,CAACqB,GAAG,EAAE;MACXa,IAAI,EAAET,MAAM;MACZC,IAAI,EAAEA,IAAI;MACVS,MAAM,EAAE,EAAE;MAAE;MACZC,MAAM,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC;MAAE;MAC1CC,MAAM,EAAE;QACJC,QAAQ,EAAE,EAAE;QACZC,WAAW,EAAE,CAAC;QACdC,MAAM,EAAE,MAAM;QAAE;QAChBC,MAAM,EAAE,QAAQ,CAAE;MACtB,CAAC;MACDC,UAAU,EAAE;QACRC,SAAS,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE;QAC3BC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE;QAC5BC,SAAS,EAAE;MACf,CAAC;MACDC,UAAU,EAAE;QACRH,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAE;MAChC;IACJ,CAAC,CAAC;;IAEF;IACAzB,GAAG,CAAC6B,IAAI,CAAC,uBAAuB,CAAC;EACrC,CAAC;;EAGD;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,IAAI,GAAGxC,KAAK,CAACe,GAAG,CAAC,CAAC;MAAEC,IAAI;MAAEC;IAAS,CAAC,KAAK;MAC3C,MAAMwB,UAAU,GAAG,IAAI/C,QAAQ,CAAC;QAC5BS,QAAQ,EAAE,CACN,IAAIV,SAAS,CAAC;UAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAACyB,IAAI,CAAC,CAAC;UAAE0B,UAAU,EAAE;QAAE,CAAC,CAAC;MAEzE,CAAC,CAAC;MAEF,MAAMC,WAAW,GAAG1B,QAAQ,CAACF,GAAG,CAAC,CAAC;QAAEG,OAAO;QAAEC,KAAK;QAAEC;MAAS,CAAC,KAAK;QAC/D,OAAO,IAAI1B,QAAQ,CAAC;UAChBS,QAAQ,EAAE,CACN,IAAIV,SAAS,CAAC;YAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC2B,OAAO,CAAC;UAAE,CAAC,CAAC,EACrD,IAAIzB,SAAS,CAAC;YAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC,GAAG4B,KAAK,QAAQ,CAAC;UAAE,CAAC,CAAC,EAC9D,IAAI1B,SAAS,CAAC;YAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC6B,QAAQ,IAAI,KAAK,CAAC;UAAE,CAAC,CAAC;QAEvE,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAO,CAACqB,UAAU,EAAE,GAAGE,WAAW,CAAC;IACvC,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAGJ,IAAI,CAACnB,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAMZ,GAAG,GAAG,IAAIpB,QAAQ,CAAC;MACrBwD,QAAQ,EAAE,CACN;QACI1C,QAAQ,EAAE,CACN,IAAIZ,SAAS,CAAC;UAAEqB,IAAI,EAAE,sBAAsB;UAAEkC,OAAO,EAAE;QAAW,CAAC,CAAC,EACpE,IAAItD,KAAK,CAAC;UACNgD,IAAI,EAAE,CACF,IAAI9C,QAAQ,CAAC;YACTS,QAAQ,EAAE,CACN,IAAIV,SAAS,CAAC;cAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC,SAAS,CAAC;YAAE,CAAC,CAAC,EACvD,IAAIE,SAAS,CAAC;cAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC,mBAAmB,CAAC;YAAE,CAAC,CAAC,EACjE,IAAIE,SAAS,CAAC;cAAEU,QAAQ,EAAE,CAAC,IAAIZ,SAAS,CAAC,UAAU,CAAC;YAAE,CAAC,CAAC;UAEhE,CAAC,CAAC,EACF,GAAGqD,QAAQ;QAEnB,CAAC,CAAC;MAEV,CAAC;IAET,CAAC,CAAC;IAEFtD,MAAM,CAACyD,MAAM,CAACtC,GAAG,CAAC,CAACuC,IAAI,CAAEC,IAAI,IAAK;MAC9BtD,MAAM,CAACsD,IAAI,EAAE,wBAAwB,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;EAED,oBACIpD,OAAA;IAAKqD,SAAS,EAAC,eAAe;IAAA/C,QAAA,gBAC1BN,OAAA;MAAAM,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BV,OAAA;MAAAM,QAAA,gBACIN,OAAA;QAAAM,QAAA,eACIN,OAAA;UAAAM,QAAA,gBACIN,OAAA;YAAAM,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACbV,OAAA;YAAAM,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChBV,OAAA;YAAAM,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BV,OAAA;YAAAM,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRV,OAAA;QAAAM,QAAA,EACKH,KAAK,CAACe,GAAG,CAAC,CAACoC,QAAQ,EAAEC,SAAS,KAC3BD,QAAQ,CAAClC,QAAQ,CAACF,GAAG,CAAC,CAACG,OAAO,EAAEmC,QAAQ,kBACpCxD,OAAA;UAAAM,QAAA,gBACIN,OAAA;YAAAM,QAAA,EAAKiD,SAAS,KAAKC,QAAQ,GAAGF,QAAQ,CAACnC,IAAI,GAAG;UAAE;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtDV,OAAA;YAAAM,QAAA,EAAKe,OAAO,CAACA;UAAO;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1BV,OAAA;YAAAM,QAAA,GAAKe,OAAO,CAACC,KAAK,EAAC,QAAM;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9BV,OAAA;YAAAM,QAAA,EAAKe,OAAO,CAACE,QAAQ,IAAI;UAAK;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GAJ/B,GAAG6C,SAAS,IAAIC,QAAQ,EAAE;UAAAjD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAK/B,CACP,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACRV,OAAA;MAAKqD,SAAS,EAAC,SAAS;MAAA/C,QAAA,gBACpBN,OAAA;QAAQyD,OAAO,EAAE9C,WAAY;QAAAL,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpDV,OAAA;QAAQyD,OAAO,EAAEf,YAAa;QAAApC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACgD,EAAA,GA1IQzD,YAAY;AA4IrB,eAAeA,YAAY;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}