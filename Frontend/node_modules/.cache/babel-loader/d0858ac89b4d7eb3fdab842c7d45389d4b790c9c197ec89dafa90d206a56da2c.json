{"ast":null,"code":"var _jsxFileName = \"/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js\";\nimport React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  estimates\n}) {\n  // Check if estimates exist\n  if (!estimates || !estimates.tasks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this); // or handle case when no estimates are passed\n  }\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Project Task Details', 10, 10);\n    autoTable(doc, {\n      head: [['Task', 'Subtask', 'Development Hours', 'Comments/Notes']],\n      body: estimates.tasks.flatMap(task => task.subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => [task.task, subtask, `${hours} hours`, comments || 'N/A']))\n    });\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const rows = estimates.tasks.flatMap(task => task.subtasks.map(({\n      subtask,\n      hours,\n      comments\n    }) => {\n      return new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph(task.task)]\n        }), new TableCell({\n          children: [new Paragraph(subtask)]\n        }), new TableCell({\n          children: [new Paragraph(`${hours} hours`)]\n        }), new TableCell({\n          children: [new Paragraph(comments || 'N/A')]\n        })]\n      });\n    }));\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1'\n        }), new Table({\n          rows: rows\n        })]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Project Task Estimates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Development Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comments/Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: estimates.tasks.map((task, taskIndex) => task.subtasks.map(({\n          subtask,\n          hours,\n          comments\n        }, subtaskIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: subtask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${hours} hours`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comments || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)]\n        }, `${taskIndex}-${subtaskIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToPDF,\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToDOCX,\n        children: \"Export to DOCX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","jsxDEV","_jsxDEV","ResultsTable","estimates","tasks","children","fileName","_jsxFileName","lineNumber","columnNumber","exportToPDF","doc","text","head","body","flatMap","task","subtasks","map","subtask","hours","comments","save","exportToDOCX","rows","sections","heading","toBlob","then","blob","taskIndex","subtaskIndex","onClick","_c","$RefreshReg$"],"sources":["/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\n\nfunction ResultsTable({ estimates }) {\n    // Check if estimates exist\n    if (!estimates || !estimates.tasks) {\n        return <div>Loading...</div>;  // or handle case when no estimates are passed\n    }\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.text('Project Task Details', 10, 10);\n        autoTable(doc, {\n            head: [['Task', 'Subtask', 'Development Hours', 'Comments/Notes']],\n            body: estimates.tasks.flatMap((task) =>\n                task.subtasks.map(({ subtask, hours, comments }) => [\n                    task.task,\n                    subtask,\n                    `${hours} hours`,\n                    comments || 'N/A',\n                ])\n            ),\n        });\n        doc.save('Project_Estimates.pdf');\n    };\n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const rows = estimates.tasks.flatMap((task) =>\n            task.subtasks.map(({ subtask, hours, comments }) => {\n                return new TableRow({\n                    children: [\n                        new TableCell({ children: [new Paragraph(task.task)] }),\n                        new TableCell({ children: [new Paragraph(subtask)] }),\n                        new TableCell({ children: [new Paragraph(`${hours} hours`)] }),\n                        new TableCell({ children: [new Paragraph(comments || 'N/A')] }),\n                    ],\n                });\n            })\n        );\n\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({ text: 'Project Task Details', heading: 'Heading1' }),\n                        new Table({\n                            rows: rows,\n                        }),\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div>\n            <h2>Project Task Estimates</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Subtask</th>\n                        <th>Development Hours</th>\n                        <th>Comments/Notes</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {estimates.tasks.map((task, taskIndex) =>\n                        task.subtasks.map(({ subtask, hours, comments }, subtaskIndex) => (\n                            <tr key={`${taskIndex}-${subtaskIndex}`}>\n                                <td>{task.task}</td>\n                                <td>{subtask}</td>\n                                <td>{`${hours} hours`}</td>\n                                <td>{comments || 'N/A'}</td>\n                            </tr>\n                        ))\n                    )}\n                </tbody>\n            </table>\n            <div>\n                <button onClick={exportToPDF}>Export to PDF</button>\n                <button onClick={exportToDOCX}>Export to DOCX</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultsTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}