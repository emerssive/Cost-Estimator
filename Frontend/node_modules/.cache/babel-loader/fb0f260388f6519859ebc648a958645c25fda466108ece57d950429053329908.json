{"ast":null,"code":"var _jsxFileName = \"/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  projectData\n}) {\n  _s();\n  const [tasks, setTasks] = useState(projectData.tasks || []);\n  const [editingRow, setEditingRow] = useState({}); // Track which row is being edited\n  const [errors, setErrors] = useState({}); // Track errors for validation\n\n  // Handle input changes during editing\n  const handleChange = (taskIndex, subtaskIndex, field, value) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n    setTasks(updatedTasks);\n  };\n\n  // Handle save action for a specific row\n  const handleSave = (taskIndex, subtaskIndex) => {\n    const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n    // Validate input\n    if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n      setErrors({\n        taskIndex,\n        subtaskIndex,\n        message: 'Subtask name cannot be empty, and hours must be a positive number.'\n      });\n      return;\n    }\n\n    // Clear errors and exit editing mode\n    setErrors({});\n    setEditingRow({});\n  };\n\n  // Export to PDF\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Project Task Details', 14, 20);\n    const tableData = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      tableData.push([task, '', '', '']);\n      subtasks.forEach(({\n        subtask,\n        hours,\n        comments\n      }) => {\n        tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n      });\n    });\n    autoTable(doc, {\n      head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n      body: tableData,\n      startY: 30,\n      margin: {\n        left: 14,\n        right: 14\n      },\n      headStyles: {\n        fillColor: [41, 128, 185],\n        textColor: 255\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      }\n    });\n    doc.save('Project_Estimates.pdf');\n  };\n\n  // Export to DOCX\n  const exportToDOCX = () => {\n    const docContent = [];\n    tasks.forEach(({\n      task,\n      subtasks\n    }) => {\n      docContent.push(new Paragraph({\n        text: task,\n        heading: 'Heading2',\n        spacing: {\n          after: 200\n        }\n      }));\n      const subtaskRows = subtasks.map(({\n        subtask,\n        hours,\n        comments\n      }) => new TableRow({\n        children: [new TableCell({\n          children: [new Paragraph({\n            text: subtask,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: `${hours} hours`,\n            alignment: 'center'\n          })]\n        }), new TableCell({\n          children: [new Paragraph({\n            text: comments || 'N/A',\n            alignment: 'center'\n          })]\n        })]\n      }));\n      const table = new Table({\n        rows: [new TableRow({\n          children: [new TableCell({\n            children: [new Paragraph({\n              text: 'Subtask',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Development Hours',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          }), new TableCell({\n            children: [new Paragraph({\n              text: 'Comments',\n              bold: true,\n              alignment: 'center'\n            })],\n            shading: {\n              fill: 'DCE6F1'\n            }\n          })]\n        }), ...subtaskRows],\n        width: {\n          size: 100,\n          type: 'pct'\n        }\n      });\n      docContent.push(table);\n      docContent.push(new Paragraph({\n        text: '',\n        spacing: {\n          after: 400\n        }\n      }));\n    });\n    const doc = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: 'Project Task Details',\n          heading: 'Heading1',\n          spacing: {\n            after: 300\n          }\n        }), ...docContent]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'Project_Estimates.docx');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Project Task Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), errors.message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: errors.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-button\",\n        onClick: exportToPDF,\n        children: \"Export to PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-button\",\n        onClick: exportToDOCX,\n        children: \"Export to DOCX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_s(ResultsTable, \"1a5B8LEntse+FKYRCjgxTmz+OdE=\");\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","useState","jsPDF","autoTable","Document","Packer","Paragraph","Table","TableCell","TableRow","saveAs","jsxDEV","_jsxDEV","ResultsTable","projectData","_s","tasks","setTasks","editingRow","setEditingRow","errors","setErrors","handleChange","taskIndex","subtaskIndex","field","value","updatedTasks","subtasks","handleSave","subtask","hours","isNaN","message","exportToPDF","doc","text","tableData","forEach","task","push","comments","head","body","startY","margin","left","right","headStyles","fillColor","textColor","alternateRowStyles","save","exportToDOCX","docContent","heading","spacing","after","subtaskRows","map","children","alignment","table","rows","bold","shading","fill","width","size","type","sections","toBlob","then","blob","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/muhammadb/Studies/Internship/Cost Estimator/Frontend/src/ResultsTable.js"],"sourcesContent":["import React, { useState } from 'react';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { Document, Packer, Paragraph, Table, TableCell, TableRow } from 'docx';\nimport { saveAs } from 'file-saver';\n\nfunction ResultsTable({ projectData }) {\n    const [tasks, setTasks] = useState(projectData.tasks || []);\n    const [editingRow, setEditingRow] = useState({}); // Track which row is being edited\n    const [errors, setErrors] = useState({}); // Track errors for validation\n\n    // Handle input changes during editing\n    const handleChange = (taskIndex, subtaskIndex, field, value) => {\n        const updatedTasks = [...tasks];\n        updatedTasks[taskIndex].subtasks[subtaskIndex][field] = value;\n        setTasks(updatedTasks);\n    };\n\n    // Handle save action for a specific row\n    const handleSave = (taskIndex, subtaskIndex) => {\n        const subtask = tasks[taskIndex].subtasks[subtaskIndex];\n\n        // Validate input\n        if (!subtask.subtask || subtask.hours <= 0 || isNaN(subtask.hours)) {\n            setErrors({\n                taskIndex,\n                subtaskIndex,\n                message: 'Subtask name cannot be empty, and hours must be a positive number.',\n            });\n            return;\n        }\n\n        // Clear errors and exit editing mode\n        setErrors({});\n        setEditingRow({});\n    };\n\n    // Export to PDF\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.text('Project Task Details', 14, 20);\n\n        const tableData = [];\n        tasks.forEach(({ task, subtasks }) => {\n            tableData.push([task, '', '', '']);\n            subtasks.forEach(({ subtask, hours, comments }) => {\n                tableData.push(['', subtask, `${hours} hours`, comments || 'N/A']);\n            });\n        });\n\n        autoTable(doc, {\n            head: [['Task', 'Subtask', 'Development Hours', 'Comments']],\n            body: tableData,\n            startY: 30,\n            margin: { left: 14, right: 14 },\n            headStyles: { fillColor: [41, 128, 185], textColor: 255 },\n            alternateRowStyles: { fillColor: [240, 240, 240] },\n        });\n\n        doc.save('Project_Estimates.pdf');\n    };\n\n    // Export to DOCX\n    const exportToDOCX = () => {\n        const docContent = [];\n\n        tasks.forEach(({ task, subtasks }) => {\n            docContent.push(\n                new Paragraph({\n                    text: task,\n                    heading: 'Heading2',\n                    spacing: { after: 200 },\n                })\n            );\n\n            const subtaskRows = subtasks.map(({ subtask, hours, comments }) =>\n                new TableRow({\n                    children: [\n                        new TableCell({\n                            children: [new Paragraph({ text: subtask, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: `${hours} hours`, alignment: 'center' })],\n                        }),\n                        new TableCell({\n                            children: [new Paragraph({ text: comments || 'N/A', alignment: 'center' })],\n                        }),\n                    ],\n                })\n            );\n\n            const table = new Table({\n                rows: [\n                    new TableRow({\n                        children: [\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Subtask', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Development Hours', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                            new TableCell({\n                                children: [new Paragraph({ text: 'Comments', bold: true, alignment: 'center' })],\n                                shading: { fill: 'DCE6F1' },\n                            }),\n                        ],\n                    }),\n                    ...subtaskRows,\n                ],\n                width: { size: 100, type: 'pct' },\n            });\n\n            docContent.push(table);\n            docContent.push(\n                new Paragraph({\n                    text: '',\n                    spacing: { after: 400 },\n                })\n            );\n        });\n\n        const doc = new Document({\n            sections: [\n                {\n                    children: [\n                        new Paragraph({\n                            text: 'Project Task Details',\n                            heading: 'Heading1',\n                            spacing: { after: 300 },\n                        }),\n                        ...docContent,\n                    ],\n                },\n            ],\n        });\n\n        Packer.toBlob(doc).then((blob) => {\n            saveAs(blob, 'Project_Estimates.docx');\n        });\n    };\n\n    return (\n        <div className=\"results-table\">\n            <h3>Project Task Details</h3>\n            \n            {errors.message && <p className=\"error\">{errors.message}</p>}\n            <div className=\"actions\">\n                <button className=\"export-button\" onClick={exportToPDF}>\n                    Export to PDF\n                </button>\n                <button className=\"export-button\" onClick={exportToDOCX}>\n                    Export to DOCX\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultsTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}